import os
from fpdf import FPDF
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ExportManager:
    """Handle export of summaries to various formats"""
    
    def __init__(self):
        self.export_dir = "exports"
        os.makedirs(self.export_dir, exist_ok=True)
    
    def export_to_txt(self, result_data):
        """Export summary to TXT format"""
        try:
            filename = f"summary_{result_data['id']}.txt"
            filepath = os.path.join(self.export_dir, filename)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write("AI-POWERED NOTES SUMMARIZER - EXPORT REPORT\n")
                f.write("=" * 50 + "\n\n")
                
                # Metadata
                f.write("DOCUMENT INFORMATION:\n")
                f.write(f"• Original File: {result_data['filename']}\n")
                f.write(f"• Processed Date: {result_data['timestamp']}\n")
                f.write(f"• Model Used: {result_data['model_used']}\n")
                f.write(f"• Original Length: {result_data['text_length']} words\n")
                f.write(f"• Summary Length: {result_data['summary_length']} words\n")
                f.write(f"• Compression Ratio: {((result_data['text_length'] - result_data['summary_length']) / result_data['text_length'] * 100):.1f}%\n\n")
                
                # Summary
                f.write("SUMMARY:\n")
                f.write("-" * 20 + "\n")
                f.write(result_data['summary'] + "\n\n")
                
                # Keywords
                if result_data.get('keywords'):
                    f.write("KEY TERMS:\n")
                    f.write("-" * 20 + "\n")
                    for i, keyword in enumerate(result_data['keywords'], 1):
                        f.write(f"{i}. {keyword}\n")
                    f.write("\n")
                
                # Footer
                f.write("-" * 50 + "\n")
                f.write("Generated by AI-Powered Notes Summarizer\n")
                f.write(f"Export Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            
            logger.info(f"TXT export saved: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"Error exporting to TXT: {str(e)}")
            return None
    
    def export_to_pdf(self, result_data):
        """Export summary to PDF format using FPDF"""
        try:
            filename = f"summary_{result_data['id']}.pdf"
            filepath = os.path.join(self.export_dir, filename)
            
            pdf = FPDF()
            pdf.add_page()
            
            # Set fonts
            pdf.add_font('Arial', '', 'Arial.ttf', uni=True)  # If available
            
            # Title
            pdf.set_font('Arial', 'B', 16)
            pdf.cell(0, 10, 'AI-POWERED NOTES SUMMARIZER', 0, 1, 'C')
            pdf.set_font('Arial', 'B', 14)
            pdf.cell(0, 10, 'SUMMARY REPORT', 0, 1, 'C')
            pdf.ln(5)
            
            # Metadata section
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 8, 'DOCUMENT INFORMATION', 0, 1)
            pdf.line(10, pdf.get_y(), 200, pdf.get_y())
            pdf.ln(2)
            
            pdf.set_font('Arial', '', 10)
            metadata_items = [
                f"Original File: {result_data['filename']}",
                f"Processed Date: {result_data['timestamp'][:19]}",
                f"Model Used: {result_data['model_used']}",
                f"Original Length: {result_data['text_length']} words",
                f"Summary Length: {result_data['summary_length']} words",
                f"Compression Ratio: {((result_data['text_length'] - result_data['summary_length']) / result_data['text_length'] * 100):.1f}%"
            ]
            
            for item in metadata_items:
                pdf.cell(0, 6, item, 0, 1)
            pdf.ln(5)
            
            # Summary section
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 8, 'SUMMARY', 0, 1)
            pdf.line(10, pdf.get_y(), 200, pdf.get_y())
            pdf.ln(2)
            
            pdf.set_font('Arial', '', 10)
            
            # Split summary into lines to fit PDF width
            summary_text = result_data['summary']
            words = summary_text.split()
            lines = []
            current_line = ""
            
            for word in words:
                if len(current_line + word) < 80:  # Approximate character limit per line
                    current_line += word + " "
                else:
                    lines.append(current_line.strip())
                    current_line = word + " "
            
            if current_line:
                lines.append(current_line.strip())
            
            for line in lines:
                pdf.cell(0, 6, line, 0, 1)
            
            pdf.ln(5)
            
            # Keywords section
            if result_data.get('keywords'):
                pdf.set_font('Arial', 'B', 12)
                pdf.cell(0, 8, 'KEY TERMS', 0, 1)
                pdf.line(10, pdf.get_y(), 200, pdf.get_y())
                pdf.ln(2)
                
                pdf.set_font('Arial', '', 10)
                
                # Format keywords in columns
                keywords = result_data['keywords']
                for i in range(0, len(keywords), 2):
                    line = f"{i+1}. {keywords[i]}"
                    if i+1 < len(keywords):
                        line += f"        {i+2}. {keywords[i+1]}"
                    pdf.cell(0, 6, line, 0, 1)
                
                pdf.ln(5)
            
            # Footer
            pdf.ln(10)
            pdf.line(10, pdf.get_y(), 200, pdf.get_y())
            pdf.ln(2)
            pdf.set_font('Arial', 'I', 8)
            pdf.cell(0, 5, 'Generated by AI-Powered Notes Summarizer', 0, 1, 'C')
            pdf.cell(0, 5, f'Export Date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', 0, 1, 'C')
            
            pdf.output(filepath, 'F')
            logger.info(f"PDF export saved: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"Error exporting to PDF: {str(e)}")
            # Fallback: create simple PDF
            return self._create_simple_pdf(result_data)
    
    def _create_simple_pdf(self, result_data):
        """Create a simple PDF if standard method fails"""
        try:
            filename = f"summary_{result_data['id']}_simple.pdf"
            filepath = os.path.join(self.export_dir, filename)
            
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font('Arial', 'B', 16)
            pdf.cell(0, 10, 'Summary Report', 0, 1, 'C')
            pdf.ln(10)
            
            pdf.set_font('Arial', '', 12)
            # Simple text output
            summary_lines = result_data['summary'].split('. ')
            for line in summary_lines:
                if line.strip():
                    pdf.cell(0, 8, line.strip() + '.', 0, 1)
                    pdf.ln(2)
            
            pdf.output(filepath, 'F')
            return filepath
            
        except Exception as e:
            logger.error(f"Error creating simple PDF: {str(e)}")
            return None
    
    def export_metadata_csv(self, metadata_list):
        """Export processing history to CSV"""
        try:
            import pandas as pd
            
            if not metadata_list:
                return None
            
            # Create DataFrame
            df = pd.DataFrame(metadata_list)
            
            # Select relevant columns
            columns = ['filename', 'timestamp', 'model_used', 'text_length', 
                      'summary_length', 'keywords']
            df = df[columns]
            
            # Format keywords
            df['keywords'] = df['keywords'].apply(
                lambda x: ', '.join(x) if isinstance(x, list) else ''
            )
            
            filename = f"processing_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            filepath = os.path.join(self.export_dir, filename)
            
            df.to_csv(filepath, index=False, encoding='utf-8')
            logger.info(f"CSV export saved: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"Error exporting to CSV: {str(e)}")
            return None
    
    def cleanup_old_exports(self, days=7):
        """Clean up export files older than specified days"""
        try:
            import time
            
            cutoff_time = time.time() - (days * 24 * 60 * 60)
            cleaned_files = 0
            
            for filename in os.listdir(self.export_dir):
                filepath = os.path.join(self.export_dir, filename)
                if os.path.isfile(filepath):
                    file_time = os.path.getmtime(filepath)
                    if file_time < cutoff_time:
                        os.remove(filepath)
                        cleaned_files += 1
            
            logger.info(f"Cleaned up {cleaned_files} old export files")
            return cleaned_files
            
        except Exception as e:
            logger.error(f"Error cleaning up exports: {str(e)}")
            return 0